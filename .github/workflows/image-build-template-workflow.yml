name: Reusable workflow

on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      event_version:
        type: string
        default: "2.1.12-stable"
      tbt_version:
        required: false
        type: string
        default: "4.0.4"
      build-context:
        required: true
        type: string
      version:
        required: true
        type: string
      tag:
        required: true
        type: string

jobs:
  setup-build-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ linux/amd64, linux/arm, linux/arm64 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # QEMU emulator to build for other platforms
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Buildx automates creating the multi-arch manifest build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          install: true
          use: true

      # Display instances
      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Cache Docker layers
        if: false
        uses: actions/cache@v3
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # show available plateforms
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      # Authenticate so that we can push to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ${{ inputs.build-context }}
          file: ./Dockerfile
          #cache-from: type=local,src=/tmp/.buildx-cache
          #cache-to: type=local,dest=/tmp/.buildx-cache
          # removed linux/arm64
          platforms: ${{ matrix.plateform }}
          push: true
          build-args: |
            REVISION=${{ github.ref_name }}
            LIBEVENT_VERSION=${{ env.LIBEVENT_VERSION }}
            TBT_VERSION=${{ inputs.version }}
          tags: ${{ secrets.DOCKER_USER }}/${{ inputs.image-name }}:${{ inputs.tag }}

      # inspect vulnerabilities
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ secrets.DOCKER_USER }}/${{ inputs.image-name }}:${{ inputs.tag }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/${{ secrets.DOCKER_USER }}/${{ inputs.image-name }}:${{ inputs.tag }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      # Generate image tags and labels
      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.image-name }}
          tags: |
            type=edge
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # Finally, build and push the images
      - name: Build image
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.build-context }}
          platforms: linux/arm,linux/arm64,linux/amd64
          build-args: |
            REVISION=${{ github.sha }}
            LIBEVENT_VERSION=${{ inputs.event_version }}
            TBT_VERSION=${{ inputs.tbt_version }}
          tags: ${{ secrets.DOCKER_USER }}/${{ inputs.image-name }}:${{ inputs.tag }}
          push: ${{ github.event_name != 'pull_request' }}
          labels: ${{ steps.meta.outputs.labels }}