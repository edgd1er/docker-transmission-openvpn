FROM debian:bullseye-slim as base
RUN  if [[ -n ${aptcacher} ]]; then echo "Acquire::http::Proxy \"http://${aptcacher}:3142\";" >/etc/apt/apt.conf.d/01proxy; \
    echo "Acquire::https::Proxy \"http://${aptcacher}:3142\";" >>/etc/apt/apt.conf.d/01proxy ; fi; \
    apt-get update && apt-get install -y --no-install-recommends software-properties-common \
    && apt-add-repository non-free && apt-get update && apt-get install -y --no-install-recommends \
    dumb-init openvpn privoxy procps socat libevent-2.1-7  libnatpmp1 libminiupnpc17 \
    tzdata dnsutils iputils-ping ufw openssh-client git jq curl wget unrar unzip bc libdeflate0

FROM base as devbase
ARG TBT_VERSION=3.00
ARG TBT4_VERSION="4.0.2"
ARG LIBEVENT_VERSION=2.1.12-stable
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
#hadolint ignore=DL3018,DL3008
RUN rm -rf /tmp/* /var/tmp/* /var/lib/apt/lists/*
RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates libcurl4-openssl-dev libssl-dev \
    pkg-config build-essential checkinstall wget tar zlib1g-dev intltool jq bash cmake g++ make python3 \
    gettext libdeflate-dev libevent-dev libfmt-dev libminiupnpc-dev \
    libnatpmp-dev libpsl-dev ninja-build xz-utils clang-format clang clang-tidy git
RUN curl -fsSL https://deb.nodesource.com/setup_current.x | bash -

#hadolint ignore=DL3003
#RUN mkdir -p /var/tmp && cd /var/tmp && echo "getting libevent ${LIBEVENT_VERSION} and transmission ${TBT_VERSION}"\
#    && wget --no-cache -O- https://github.com/libevent/libevent/releases/download/release-${LIBEVENT_VERSION}/libevent-${LIBEVENT_VERSION}.tar.gz \
#    | tar zx -C /var/tmp/ && mv libevent-${LIBEVENT_VERSION} libevent-${LIBEVENT_VERSION%%-*} \
#    && cd /var/tmp/libevent-${LIBEVENT_VERSION%%-*} \
#    && CFLAGS="-Os -march=native" ./configure && make -j2 \
#    && sed -i 's/TRANSLATE=1/TRANSLATE=0/g' "/etc/checkinstallrc" && checkinstall -y \
 #   && ls -alh /var/tmp/libevent-${LIBEVENT_VERSION%%-*}/ \
 #   && mv /var/tmp/libevent-${LIBEVENT_VERSION%%-*}/*.deb /var/tmp/
WORKDIR /var/tmp
#hadolint ignore=DL3003
RUN if [[ "dev" == "${TBT_VERSION}" ]]; then \
    curl -fsSL https://deb.nodesource.com/setup_current.x | bash - \
    && apt-get install -y nodejs \
    && echo "Fetching and building ${TBT_VERSION} of transmission" \
    && git clone --depth 1 --branch main https://github.com/transmission/transmission \
    && cd transmission  \
    && git submodule update --init && mkdir build \
    && cd build && cmake \
        -S src \
        -B obj \
        -G Ninja \
        -DCMAKE_BUILD_TYPE=RelWithDebInfo \
        -DCMAKE_CXX_COMPILER='/usr/bin/clang++' \
        -DCMAKE_CXX_FLAGS='-gdwarf-4 -fno-omit-frame-pointer -fsanitize=address,leak,undefined' \
        -DCMAKE_C_COMPILER='/usr/bin/clang' \
        -DCMAKE_C_FLAGS='-gdwarf-4 -fno-omit-frame-pointer -fsanitize=address,leak,undefined' \
        -DCMAKE_INSTALL_PREFIX=pfx \
        -DENABLE_CLI=ON \
        -DENABLE_DAEMON=ON \
        -DENABLE_GTK=OFF \
        -DENABLE_MAC=OFF \
        -DENABLE_QT=OFF \
        -DENABLE_TESTS=ON \
        -DENABLE_UTILS=ON \
        -DENABLE_WEB=ON \
        -DRUN_CLANG_TIDY=ON .. \
        && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo .. \
        && make \
        && make install \
        && checkinstall -y -D --pkgname transmission  --pakdir /var/tmp --pkgversion="4.0.x" \
        ; fi

#build from tagged version
RUN if [[ ${TBT_VERSION} =~ ^4 ]]; then \
    apt-get install -y --no-install-recommends libgtkmm-3.0-dev gettext qttools5-dev build-essential cmake libcurl4-openssl-dev libssl-dev; \
    URL=https://github.com/transmission/transmission/releases/download/${TBT4_VERSION}/transmission-${TBT4_VERSION}.tar.xz \
    && echo "Fetching and building ${URL##*/} of transmission" \
    && mkdir -p /var/tmp/transmission \
    && wget --no-cache -O- ${URL} | tar -Jx -C /var/tmp/transmission --strip-components=1 \
    && cd transmission && mkdir build && cd build \
    && ls -al .. \
    && pwd \
    && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo .. \
    && make \
    && make install \
    && echo "version: ${TBT_VERSION} / ${TBT_VERSION##*v}" \
    && checkinstall -y -D --pkgname transmission  --pakdir /var/tmp --pkgversion="${TBT4_VERSION}"; fi


FROM alpine:3.16 as TransmissionUIs
#hadolint ignore=DL3018,DL3008
RUN apk --no-cache add curl jq && mkdir -p /opt/transmission-ui \
    && echo "Install Shift" \
    && wget -qO- https://github.com/killemov/Shift/archive/master.tar.gz | tar xz -C /opt/transmission-ui \
    && mv /opt/transmission-ui/Shift-master /opt/transmission-ui/shift \
    && echo "Install Flood for Transmission" \
    && wget -qO- https://github.com/johman10/flood-for-transmission/releases/download/latest/flood-for-transmission.tar.gz | tar xz -C /opt/transmission-ui \
    && echo "Install Combustion" \
    && wget -qO- https://github.com/Secretmapper/combustion/archive/release.tar.gz | tar xz -C /opt/transmission-ui \
    && echo "Install kettu" \
    && wget -qO- https://github.com/endor/kettu/archive/master.tar.gz | tar xz -C /opt/transmission-ui \
    && mv /opt/transmission-ui/kettu-master /opt/transmission-ui/kettu \
    && echo "Install Transmission-Web-Control" \
    && sleep 60 \
    && mkdir /opt/transmission-ui/transmission-web-control \
    && wget -qO- "$(wget --no-cache -qO- https://api.github.com/repos/ronggang/transmission-web-control/releases/latest | jq --raw-output '.tarball_url')" | tar -C /opt/transmission-ui/transmission-web-control/ --strip-components=2 -xz

FROM base

ARG DEBIAN_FRONTEND=noninteractive
ARG TBT_VERSION=3
ARG TARGETPLATFORM

VOLUME /data
VOLUME /config

COPY --from=TransmissionUIs /opt/transmission-ui /opt/transmission-ui
COPY --from=devbase /var/tmp/*.deb /var/tmp/

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
#hadolint ignore=DL3008,SC2046

RUN echo "cpu: ${TARGETPLATFORM}" \
    && if [ -f /var/tmp/transmission_*_$(dpkg --print-architecture).deb ]; then \
    ls -alh /var/tmp/*.deb \
    && echo "Installing transmission ${TBT_VERSION}" \
    && dpkg -i /var/tmp/transmission_*_$(dpkg --print-architecture).deb  ;\
    else echo "Installing transmission from repository" \
    && apt-get install -y --no-install-recommends transmission-daemon transmission-cli; fi\
    && ln -s /usr/share/transmission/web/style /opt/transmission-ui/transmission-web-control \
    && ln -s /usr/share/transmission/web/images /opt/transmission-ui/transmission-web-control \
    && ln -s /usr/share/transmission/web/javascript /opt/transmission-ui/transmission-web-control \
    && ln -s /usr/share/transmission/web/index.html /opt/transmission-ui/transmission-web-control/index.original.html \
    #&& rm -rf /tmp/* /var/tmp/* /var/lib/apt/lists/* \
    && groupmod -g 1000 users \
    && useradd -u 911 -U -d /config -s /bin/false abc \
    && usermod -G users abc \
    && echo "alias checkip='curl -sm 10 \"https://zx2c4.com/ip\";echo'" | tee -a ~/.bashrc \
    && echo "alias checkhttp='curl -sm 10 -x http://\${HOSTNAME}:\${WEBPROXY_PORT:-8888} \"https://ifconfig.me/ip\"'" | tee -a ~/.bashrc \
    && echo "alias checkvpn='curl -sm 10 \"https://api.nordvpn.com/vpn/check/full\" | jq -r .status'" | tee -a ~/.bashrc \
    && echo "alias getcheck='curl -sm 10 \"https://api.nordvpn.com/vpn/check/full\" | jq . '" | tee -a ~/.bashrc \
    && echo "alias gettrans='grep bind /config/transmission-home/settings.json'" | tee -a ~/.bashrc \
    && echo "alias gettiny='grep -vP \"(^$|^#)\" /etc/tinyproxy/tinyproxy.conf'" | tee -a ~/.bashrc


# Add configuration and scripts
COPY openvpn/ /etc/openvpn/
COPY privoxy/scripts /opt/privoxy/
COPY scripts /etc/scripts/
COPY transmission/ /etc/transmission/
#Add a script to test dnsleeak https://raw.githubusercontent.com/macvk/dnsleaktest/master/dnsleaktest.sh
#ADD https://raw.githubusercontent.com/macvk/dnsleaktest/master/dnsleaktest.sh /etc/scripts/

# Support legacy IPTables commands
RUN update-alternatives --set iptables $(which iptables-legacy) && \
    update-alternatives --set ip6tables $(which ip6tables-legacy)

ENV OPENVPN_USERNAME=**None** \
    OPENVPN_PASSWORD=**None** \
    OPENVPN_PROVIDER=**None** \
    OPENVPN_OPTS='' \
    OPENVPN_LOGLEVEL='' \
    OPENVPN_CONFIG_URL=''\
    GLOBAL_APPLY_PERMISSIONS=true \
    TRANSMISSION_LOG_LEVEL=info \
    TRANSMISSION_WEB_UI=transmission-web-control \
    TRANSMISSION_HOME=/config/transmission-home \
    TRANSMISSION_RPC_PORT=9091 \
    TRANSMISSION_RPC_USERNAME="" \
    TRANSMISSION_RPC_PASSWORD="" \
    TRANSMISSION_DOWNLOAD_DIR=/data/completed \
    TRANSMISSION_INCOMPLETE_DIR=/data/incomplete \
    TRANSMISSION_WATCH_DIR=/data/watch \
    CREATE_TUN_DEVICE=true \
    ENABLE_UFW=false \
    UFW_ALLOW_GW_NET=false \
    UFW_EXTRA_PORTS='' \
    UFW_DISABLE_IPTABLES_REJECT=false \
    PUID=''\
    PGID='' \
    PEER_DNS=true \
    PEER_DNS_PIN_ROUTES=true \
    DROP_DEFAULT_ROUTE='' \
    WEBPROXY_ENABLED=false \
    WEBPROXY_PORT=8118 \
    WEBPROXY_USERNAME='' \
    WEBPROXY_PASSWORD='' \
    LOG_TO_STDOUT=false \
    HEALTH_CHECK_HOST=google.com \
    SELFHEAL=false

HEALTHCHECK --start-period=60s --interval=1m --retries=4 CMD /etc/scripts/healthcheck.sh

# Pass revision as a build arg, set it as env var
ARG REVISION
ENV REVISION=${REVISION:-""}

# Compatability with https://hub.docker.com/r/willfarrell/autoheal/
LABEL autoheal=true

# Expose port and run
#Transmission-RPC
EXPOSE 9091
# Privoxy
EXPOSE 8118

CMD ["dumb-init", "/etc/openvpn/start.sh"]